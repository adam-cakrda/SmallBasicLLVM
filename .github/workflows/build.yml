name: Build SmallBasicLLVM

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: SmallBasicLLVM-Linux
            compiler_binary: SmallBasicCompiler
            library_binary: libSmallBasicLibrary.a
          - os: windows-latest
            artifact_name: SmallBasicLLVM-Windows
            compiler_binary: SmallBasicCompiler.exe
            library_binary: libSmallBasicLibrary.a

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install LLVM 21 (Linux)
        if: runner.os == 'Linux'
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 21
          sudo apt-get install -y llvm-21-dev libllvm21 llvm-21-tools
          echo "LLVM_DIR=/usr/lib/llvm-21/lib/cmake/llvm" >> $GITHUB_ENV
          echo "/usr/lib/llvm-21/bin" >> $GITHUB_PATH

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libspdlog-dev libcxxopts-dev

      - name: Install MSYS2 + GCC + LLVM + Dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install -y msys2
          refreshenv
          & "C:/msys64/usr/bin/bash.exe" -lc "pacman -Syu --noconfirm"
          & "C:/msys64/usr/bin/bash.exe" -lc "pacman -S --noconfirm \
            mingw-w64-x86_64-gcc \
            mingw-w64-x86_64-llvm \
            mingw-w64-x86_64-cmake \
            mingw-w64-x86_64-ninja \
            mingw-w64-x86_64-spdlog \
            mingw-w64-x86_64-cxxopts"
          echo "LLVM_DIR=C:/msys64/mingw64/lib/cmake/llvm" >> $env:GITHUB_ENV
          echo "C:/msys64/mingw64/bin" >> $env:GITHUB_PATH

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$LLVM_DIR

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake -B build -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_C_COMPILER=gcc `
            -DCMAKE_CXX_COMPILER=g++ `
            -DCMAKE_PREFIX_PATH="C:/msys64/mingw64" `
            -DLLVM_DIR="${env:LLVM_DIR}"

      - name: Build
        run: cmake --build build --config Release

      - name: Prepare artifacts (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir -p artifacts
          cp build/${{ matrix.compiler_binary }} artifacts/
          cp build/${{ matrix.library_binary }} artifacts/

      - name: Prepare artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts
          Copy-Item "build\${{ matrix.compiler_binary }}" -Destination artifacts\
          Copy-Item "build\${{ matrix.library_binary }}" -Destination artifacts\

      - name: Create ZIP archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix